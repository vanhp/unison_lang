-- Unison support
-- if, then,else construct
-- first argument to the conditional must be an expression which returns a Boolean
-- code block use indentation to start or end a block code that indent to the same level
-- is belong to that block. code in higher indent level signify the end of the lower block
myList : [Nat]
myList = [1, 2, 3, 4, 5, 6, 7]
mySimpleTerm =
  if List.contains 5 myList then "high five" else "no five found"
mySimpleTerm

-- "high five"

myList = List.range 0 99
myListFunction =
  if List.contains 100 myList then "100 found"
  else
    if List.any (elem -> Nat.mod elem 2 === 0) myList then
      "Even found"
    else "Condition not met"
myListFunction

-- "Even found"

-- Boolean Expressions
-- can be short-circuit
--  and && if the first argument is false the rest is not evaluated
false && (base.bug "oh no")
--  or || if the first argument is true the rest is not evaluated
true || (base.bug "oh no")
-- not use to negate boolean value
not true

-- no looping construct?